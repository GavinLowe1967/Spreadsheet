https://retractionwatch.com/2013/04/18/influential-reinhart-rogoff-economics-paper-suffers-database-error/

Language
--------

- directives -- done
- EqTypeConstraint.intersection -- test **
- Test "==" with Cell types, find failures to match -- done

- Incorporate with GUI

- line numbers in type errors - done
- clear sheet before reloading - done
- errors in window -- done
- use typeEnv when reading cells -- done, test with Floats
- test ParserTest -- done

-- Move def of CellTypes
-- Environment.checkType, update typeEnv -- done

error with "val column = #B"


- Parser for Floats (script and cells), and eval.
- Parser for strings in script
- Allow Bool in cells

- polymorphism (def id[A](x: A): A = x)
- type classes (def equal[A <: Eq](x: A, y: A): Boolean = x == y)
- Num type class
- empty list

- Do we need Substitution?  Or just Reply from it? 


Lists:
-  ::, null
- [_ .. _]

* Think more about subclassing

Function declarations and applications
- parse function application -- done, but only for function names
- ensure distinct param names - static analysis
- More typenames, including in parser and ** catch incorrect types


Improve parse error messages.
* Comments.

* In parse errors, print relevant line, highlighting position; trim excessive
  text - done

"for"s. 

Behaviour
---------

Don't allow directives to overwrite user data.

Data load and save.


Appearance
----------

Index cells from 1

Code
----



===================================== DONE

Need to allow types to be refined in TypeEnv.replace, if tId associated with another cell
Either:
1. In TypeEnv, maintain map TypeID -> List(CellExpr), update in CellExpr within replace (consider case where t is TypeVar)
2. In TypeEnv.constraints, include map to singleton type

No, 1 goes wrong, as changes to the sheet won't get propsagated.  But yes -- do 1 when typechecking, but 2 at evaluation time


-- If TypeVar(x) has SingletonTypeConstraint(TypeVar(y)), then gets updated,
   also need to update y

-- Get rid of cellReadMap - NO

- Cell type - in progress; do binOps
- Improve errors in TypeChecker.unify
- Test captured variables are uncaptured - done
- Tidy up TypeEnv - add functions - done
- BlockExp - done
- Better error message in unify.fail for TypeVar -- done
- correct BlockExpr type checking -- done
val x = #A3; val y = x; def f(x: Bool) = y+3; f(true) 

(+) : Num a => (a,a) -> a; (==) : Eq a => (a,a) -> Bool; (&&) : (Bool,Bool) -> Bool, (<=) :: Num a => (a,a) -> Bool etc.  To apply to args, generate TypeVar(t) with
constraint Num.  Try to unify with types of args.  To unify concrete type with
Num, succeed if it is numeric.  To combine two constraints, take intersection.
constraints need operations 
def satisfied(t: TypeT) : Boolean
def intersection(c: Constraint): Constraint 
constraints correspond to Cell, Eq, Num
Line numbers in error messages - done
* On reload, refresh top box -- but no longer a selected cell
Reload directives button -- DONE
* Check return type of function - done
- Allow "true", "false" literals -- done
- evaluate function application -- done
- Parse functions -- done
- perform functions - store in environment -- done
* Include source in declarations, for error messages. -- DONE

Require statements to be separated by "\n" or ";" -- DONE

Tidy up StatementParser -- all tests to separate object. -- DONE

Blocks in declarations.  That makes Exp and Statement recursive. Or define
Block extends Exp in Statement.  But ExpParser depends on StatementParser.  -- DONE 

In BlockExp.eval, need to catch errors in performing stmts.  Replace view in
Statement.perform by function handleError: ErrorValue => Unit -- DONE

clear calculated in Model -- DONE