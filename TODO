https://retractionwatch.com/2013/04/18/influential-reinhart-rogoff-economics-paper-suffers-database-error/

Language
--------

Outstanding:

- Clear boxes on reload
- EqTypeConstraint.intersection -- test **
- parser for bools in spreadsheet
- Parser for strings in script. 
- Improve error messages concerning polymorphic types: "val xs = head(3)" ->
  Expected List[TypeVar(133)], found Int at line 1
- Allow function application where function is arbitrary expression

Current: 

Try to allow arithmetic operators to be applied to Int and Float.

Idea: give type of an integer litteral as a new TypeVar with
NumTypeConstraint.  This nearly works.  It works for

def f[A <: Num](x: A): A = 3+x

The unification replaces the TypeVar for "3" with TypeParam("A").

But it doesn't work for

def f[A <: Num](x: A): A = x+3
def f[A <: Num](): A = 3

The unification tries to unify the TypeVar for "3" with TypeParam("A"), which
fails.

...
  
Lists:
- [_ .. _]
- list comprehensions

Long term
---------

* Allow arithmetic operators to be applied to Int and Float.
def f[A <: NumType](): A = 3
[3, 5.5]

* "for"s. 

* Allow type annonations in script, e.g. x = #A3 : Int

Musings
-------

When can type t1 instantiate t2?

t1              t2
Concrete type   Concrete type  Same type only
TypeVar(tid)    Concrete type  Constraint on tid includes t2
Concrete type   Type param     t1 satisfies constraint on t2
TypeVar(tid)    Type param     Constraint on tid \inter constraint on t2 nonempty
Type param      Type param     t1 = t2
ListType(tt1)   ListType(tt2)  tt1 can instantiate tt2
ListType(tt1)   Type param     ListType(tt1) satisfies constraint on t2


Behaviour
=========

Don't allow directives to overwrite user data.

Data load and save.


Appearance
----------

Index cells from 1

Code
----



===================================== DONE


* In parse errors, print relevant line, highlighting position; trim excessive
  text - done

Function declarations and applications
- parse function application -- done, but only for function names
- ensure distinct param names - static analysis
- More typenames, including in parser and ** catch incorrect types


Improve parse error messages.
-  null -- done

- polymorphism (def id[A](x: A): A = x) -- done
- type classes (def equal[A <: Eq](x: A, y: A): Boolean = x == y)
- give polymorphic types to built-in functions, head, tail 

- Num type class

* Parsing of type constraints: Eq and Num
* Type checking with constraints 
  def add[A <: Num](x: A, y: A): A = x+y
  def equal[A <: Eq](x: A, y: A) : Boolean = x == y
  def sum[A <: Num](xs: List[A]) : A = ... base case ??
- Check that all types in function declaration signatures are declared. -- done
1. In type environment, store (TypeParam => TypeConstraint) map.  -- done
2. Update when processing function declaration --done
3. Check names at same point --done
3. Remove new names when leaving scope: store previous map in Frame -- done
- When calling functions/binops, check that lower bound of each actual
  parameter is a subset of the type of the formal parameter. -- done for
  functions, I think.  But not binops
*** In TypeChecker on FunctionDeclarations: 
// if any of tparams gets bound to a TypeVar, update in typeEnv(name) -- NO
val y = #A3
def f(x: Int): Int = x+y -- seems fine
def g[A <: Num](x: A): A = x+y -- do we want this?  -- NO- Check return type param in scope -- done

- What is needed in TypeEnv at evaluation time?  constraints,
  apply(tid). typeParamMap, constraintForTypeParam, replaceEvalTime, showType
- Check names of parameters of functions are disjoint.  -- done
- check declared names are disjoint in each block. -- done
- Improve Directive.perform re error handling. -- done
- TypeT.isSubclassOf -- done
- Value.getType -- done

- Remove eval from Exp classes. and perform from Statement -- done
- Move FunctionDeclaration and FunctionApp and BlockExp -- done

- Chenage FunctionValue to encapsulate function List[Value] => Value? -- done

-- Done introduction of type parameters.  Allow their use in types of params or return value. 
- Substitution.scala. l20, FIXME

- For functions with type parameters, replace each with type variable with
  "lower bound" constraint.  (?)  No, separately record restrictions on type
  params.
- type checking for lists, from left-to-right
- empty list
All commented out tests in ParserTest, chck fail typechecking

- TypeVar.isEqType
- :: -- add eval -- done
* Comments.

- Allow Bool in cells -- done
-- Any type errors should not now arise in Exp.eval -- check this
-- Tidy up BinOp -- done
- evalExpectError

- Parser for Floats (script and cells), and eval. -- done
-- Change FloatValue to Cell -- done
- use typeEnv when reading cells -- done, test with Floats
error with "val column = #B" -- fixed
-- Move def of CellTypes -- done
-- Environment.checkType, update typeEnv -- done
- Incorporate with GUI

- line numbers in type errors - done
- clear sheet before reloading - done
- errors in window -- done
- test ParserTest -- done
- directives -- done
- Test "==" with Cell types, find failures to match -- done

Need to allow types to be refined in TypeEnv.replace, if tId associated with another cell
Either:
1. In TypeEnv, maintain map TypeID -> List(CellExpr), update in CellExpr within replace (consider case where t is TypeVar)
2. In TypeEnv.constraints, include map to singleton type

No, 1 goes wrong, as changes to the sheet won't get propsagated.  But yes -- do 1 when typechecking, but 2 at evaluation time


-- If TypeVar(x) has SingletonTypeConstraint(TypeVar(y)), then gets updated,
   also need to update y

-- Get rid of cellReadMap - NO

- Cell type - in progress; do binOps
- Improve errors in TypeChecker.unify
- Test captured variables are uncaptured - done
- Tidy up TypeEnv - add functions - done
- BlockExp - done
- Better error message in unify.fail for TypeVar -- done
- correct BlockExpr type checking -- done
val x = #A3; val y = x; def f(x: Bool) = y+3; f(true) 

(+) : Num a => (a,a) -> a; (==) : Eq a => (a,a) -> Bool; (&&) : (Bool,Bool) -> Bool, (<=) :: Num a => (a,a) -> Bool etc.  To apply to args, generate TypeVar(t) with
constraint Num.  Try to unify with types of args.  To unify concrete type with
Num, succeed if it is numeric.  To combine two constraints, take intersection.
constraints need operations 
def satisfied(t: TypeT) : Boolean
def intersection(c: Constraint): Constraint 
constraints correspond to Cell, Eq, Num
Line numbers in error messages - done
* On reload, refresh top box -- but no longer a selected cell
Reload directives button -- DONE
* Check return type of function - done
- Allow "true", "false" literals -- done
- evaluate function application -- done
- Parse functions -- done
- perform functions - store in environment -- done
* Include source in declarations, for error messages. -- DONE

Require statements to be separated by "\n" or ";" -- DONE

Tidy up StatementParser -- all tests to separate object. -- DONE

Blocks in declarations.  That makes Exp and Statement recursive. Or define
Block extends Exp in Statement.  But ExpParser depends on StatementParser.  -- DONE 

In BlockExp.eval, need to catch errors in performing stmts.  Replace view in
Statement.perform by function handleError: ErrorValue => Unit -- DONE

clear calculated in Model -- DONE